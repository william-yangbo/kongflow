// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package events

import (
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

// Events 事件调度器表，对齐 trigger.dev EventDispatcher 模型
type EventDispatchers struct {
	ID     pgtype.UUID `json:"id"`
	Event  string      `json:"event"`
	Source string      `json:"source"`
	// 事件负载过滤规则的JSON定义
	PayloadFilter []byte `json:"payload_filter"`
	// 事件上下文过滤规则的JSON定义
	ContextFilter  []byte `json:"context_filter"`
	Manual         bool   `json:"manual"`
	DispatchableID string `json:"dispatchable_id"`
	// 可调度对象的JSON定义，包含类型和ID信息
	Dispatchable  []byte             `json:"dispatchable"`
	Enabled       bool               `json:"enabled"`
	EnvironmentID pgtype.UUID        `json:"environment_id"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

// 事件记录表，存储测试事件和实际事件记录
type EventRecords struct {
	ID pgtype.UUID `json:"id"`
	// 事件唯一标识符
	EventID string `json:"event_id"`
	// 事件名称
	Name string `json:"name"`
	// 事件源，如 trigger.dev
	Source string `json:"source"`
	// 事件负载数据 JSON
	Payload []byte `json:"payload"`
	// 事件上下文数据 JSON
	Context        []byte             `json:"context"`
	Timestamp      pgtype.Timestamptz `json:"timestamp"`
	EnvironmentID  pgtype.UUID        `json:"environment_id"`
	OrganizationID pgtype.UUID        `json:"organization_id"`
	ProjectID      pgtype.UUID        `json:"project_id"`
	// 是否为测试事件
	IsTest    bool               `json:"is_test"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	// 关联的外部账户ID
	ExternalAccountID pgtype.UUID `json:"external_account_id"`
	// 计划投递时间，支持延迟投递
	DeliverAt pgtype.Timestamptz `json:"deliver_at"`
	// 实际投递时间，NULL表示未投递
	DeliveredAt pgtype.Timestamptz `json:"delivered_at"`
}

// API 请求和响应类型定义，对齐 trigger.dev

// SendEventRequest 发送事件请求，对齐 trigger.dev RawEvent
type SendEventRequest struct {
	ID        string                 `json:"id" validate:"required"`
	Name      string                 `json:"name" validate:"required"`
	Source    string                 `json:"source,omitempty"`
	Payload   map[string]interface{} `json:"payload,omitempty"`
	Context   map[string]interface{} `json:"context,omitempty"`
	Timestamp *time.Time             `json:"timestamp,omitempty"`
}

// SendEventOptions 发送事件选项，对齐 trigger.dev SendEventOptions
type SendEventOptions struct {
	AccountID    *string    `json:"accountId,omitempty"`
	DeliverAt    *time.Time `json:"deliverAt,omitempty"`
	DeliverAfter *int       `json:"deliverAfter,omitempty"` // 秒数
	Test         *bool      `json:"test,omitempty"`         // 显式指定是否为测试事件
}

// EventRecordResponse 事件记录响应
type EventRecordResponse struct {
	ID        string                 `json:"id"`
	EventID   string                 `json:"eventId"`
	Name      string                 `json:"name"`
	Source    string                 `json:"source"`
	Payload   map[string]interface{} `json:"payload"`
	Context   map[string]interface{} `json:"context"`
	Timestamp time.Time              `json:"timestamp"`
	DeliverAt *time.Time             `json:"deliverAt,omitempty"`
	IsTest    bool                   `json:"isTest"`
	CreatedAt time.Time              `json:"createdAt"`
}

// EventFilter 事件过滤器，对齐 trigger.dev EventFilter
type EventFilter struct {
	Payload map[string]interface{} `json:"payload"`
	Context map[string]interface{} `json:"context"`
}

// ListEventRecordsResponse 事件记录列表响应
type ListEventRecordsResponse struct {
	Records []EventRecordResponse `json:"records"`
	Total   int64                 `json:"total"`
}

// EventDispatcherResponse 事件调度器响应
type EventDispatcherResponse struct {
	ID            string                 `json:"id"`
	Event         string                 `json:"event"`
	Source        string                 `json:"source"`
	PayloadFilter map[string]interface{} `json:"payloadFilter"`
	ContextFilter map[string]interface{} `json:"contextFilter"`
	Manual        bool                   `json:"manual"`
	Enabled       bool                   `json:"enabled"`
	CreatedAt     string                 `json:"createdAt"`
}

// ListEventDispatchersResponse 事件调度器列表响应
type ListEventDispatchersResponse struct {
	Dispatchers []EventDispatcherResponse `json:"dispatchers"`
	Total       int64                     `json:"total"`
}
