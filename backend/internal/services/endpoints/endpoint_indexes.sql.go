// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: endpoint_indexes.sql

package endpoints

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEndpointIndex = `-- name: CreateEndpointIndex :one
INSERT INTO endpoint_indexes (
    endpoint_id, source, stats, data
) VALUES ($1, $2, $3, $4)
RETURNING id, endpoint_id, source, stats, data, source_data, reason,
    created_at, updated_at
`

type CreateEndpointIndexParams struct {
	EndpointID pgtype.UUID `json:"endpoint_id"`
	Source     string      `json:"source"`
	Stats      []byte      `json:"stats"`
	Data       []byte      `json:"data"`
}

type CreateEndpointIndexRow struct {
	ID         pgtype.UUID        `json:"id"`
	EndpointID pgtype.UUID        `json:"endpoint_id"`
	Source     string             `json:"source"`
	Stats      []byte             `json:"stats"`
	Data       []byte             `json:"data"`
	SourceData []byte             `json:"source_data"`
	Reason     pgtype.Text        `json:"reason"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEndpointIndex(ctx context.Context, arg CreateEndpointIndexParams) (CreateEndpointIndexRow, error) {
	row := q.db.QueryRow(ctx, createEndpointIndex,
		arg.EndpointID,
		arg.Source,
		arg.Stats,
		arg.Data,
	)
	var i CreateEndpointIndexRow
	err := row.Scan(
		&i.ID,
		&i.EndpointID,
		&i.Source,
		&i.Stats,
		&i.Data,
		&i.SourceData,
		&i.Reason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEndpointIndex = `-- name: DeleteEndpointIndex :exec
DELETE FROM endpoint_indexes WHERE id = $1
`

func (q *Queries) DeleteEndpointIndex(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEndpointIndex, id)
	return err
}

const getEndpointIndexByID = `-- name: GetEndpointIndexByID :one
SELECT id, endpoint_id, source, stats, data, source_data, reason,
    created_at, updated_at
FROM endpoint_indexes 
WHERE id = $1
`

type GetEndpointIndexByIDRow struct {
	ID         pgtype.UUID        `json:"id"`
	EndpointID pgtype.UUID        `json:"endpoint_id"`
	Source     string             `json:"source"`
	Stats      []byte             `json:"stats"`
	Data       []byte             `json:"data"`
	SourceData []byte             `json:"source_data"`
	Reason     pgtype.Text        `json:"reason"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetEndpointIndexByID(ctx context.Context, id pgtype.UUID) (GetEndpointIndexByIDRow, error) {
	row := q.db.QueryRow(ctx, getEndpointIndexByID, id)
	var i GetEndpointIndexByIDRow
	err := row.Scan(
		&i.ID,
		&i.EndpointID,
		&i.Source,
		&i.Stats,
		&i.Data,
		&i.SourceData,
		&i.Reason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEndpointIndexes = `-- name: ListEndpointIndexes :many
SELECT id, endpoint_id, source, stats, data, source_data, reason,
    created_at, updated_at
FROM endpoint_indexes 
WHERE endpoint_id = $1
ORDER BY created_at DESC
`

type ListEndpointIndexesRow struct {
	ID         pgtype.UUID        `json:"id"`
	EndpointID pgtype.UUID        `json:"endpoint_id"`
	Source     string             `json:"source"`
	Stats      []byte             `json:"stats"`
	Data       []byte             `json:"data"`
	SourceData []byte             `json:"source_data"`
	Reason     pgtype.Text        `json:"reason"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) ListEndpointIndexes(ctx context.Context, endpointID pgtype.UUID) ([]ListEndpointIndexesRow, error) {
	rows, err := q.db.Query(ctx, listEndpointIndexes, endpointID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEndpointIndexesRow
	for rows.Next() {
		var i ListEndpointIndexesRow
		if err := rows.Scan(
			&i.ID,
			&i.EndpointID,
			&i.Source,
			&i.Stats,
			&i.Data,
			&i.SourceData,
			&i.Reason,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
