// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: org_tokens.sql

package apiauth

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrganizationAccessToken = `-- name: CreateOrganizationAccessToken :one
INSERT INTO organization_access_tokens (organization_id, token, name, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, organization_id, token, name, expires_at, last_used_at, created_at, updated_at
`

type CreateOrganizationAccessTokenParams struct {
	OrganizationID pgtype.UUID        `json:"organization_id"`
	Token          string             `json:"token"`
	Name           string             `json:"name"`
	ExpiresAt      pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateOrganizationAccessToken(ctx context.Context, arg CreateOrganizationAccessTokenParams) (OrganizationAccessTokens, error) {
	row := q.db.QueryRow(ctx, createOrganizationAccessToken,
		arg.OrganizationID,
		arg.Token,
		arg.Name,
		arg.ExpiresAt,
	)
	var i OrganizationAccessTokens
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Token,
		&i.Name,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrganizationAccessToken = `-- name: FindOrganizationAccessToken :one
SELECT id, organization_id, token, name, expires_at, last_used_at, created_at, updated_at FROM organization_access_tokens WHERE token = $1 AND expires_at > NOW() LIMIT 1
`

// Organization Access Tokens queries - trigger.dev OAT alignment
func (q *Queries) FindOrganizationAccessToken(ctx context.Context, token string) (OrganizationAccessTokens, error) {
	row := q.db.QueryRow(ctx, findOrganizationAccessToken, token)
	var i OrganizationAccessTokens
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Token,
		&i.Name,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrganizationAccessTokenWithOrg = `-- name: FindOrganizationAccessTokenWithOrg :one
SELECT 
    oat.id, oat.organization_id, oat.token, oat.name, oat.expires_at, oat.last_used_at, oat.created_at, oat.updated_at,
    o.id as org_id, o.title as org_title, o.slug as org_slug
FROM organization_access_tokens oat
INNER JOIN organizations o ON oat.organization_id = o.id
WHERE oat.token = $1 AND oat.expires_at > NOW() LIMIT 1
`

type FindOrganizationAccessTokenWithOrgRow struct {
	ID             pgtype.UUID        `json:"id"`
	OrganizationID pgtype.UUID        `json:"organization_id"`
	Token          string             `json:"token"`
	Name           string             `json:"name"`
	ExpiresAt      pgtype.Timestamptz `json:"expires_at"`
	LastUsedAt     pgtype.Timestamptz `json:"last_used_at"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	OrgID          pgtype.UUID        `json:"org_id"`
	OrgTitle       string             `json:"org_title"`
	OrgSlug        string             `json:"org_slug"`
}

func (q *Queries) FindOrganizationAccessTokenWithOrg(ctx context.Context, token string) (FindOrganizationAccessTokenWithOrgRow, error) {
	row := q.db.QueryRow(ctx, findOrganizationAccessTokenWithOrg, token)
	var i FindOrganizationAccessTokenWithOrgRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Token,
		&i.Name,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrgID,
		&i.OrgTitle,
		&i.OrgSlug,
	)
	return i, err
}

const listOrganizationAccessTokensByOrg = `-- name: ListOrganizationAccessTokensByOrg :many
SELECT id, organization_id, token, name, expires_at, last_used_at, created_at, updated_at FROM organization_access_tokens 
WHERE organization_id = $1 AND expires_at > NOW()
ORDER BY created_at DESC
`

func (q *Queries) ListOrganizationAccessTokensByOrg(ctx context.Context, organizationID pgtype.UUID) ([]OrganizationAccessTokens, error) {
	rows, err := q.db.Query(ctx, listOrganizationAccessTokensByOrg, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrganizationAccessTokens
	for rows.Next() {
		var i OrganizationAccessTokens
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Token,
			&i.Name,
			&i.ExpiresAt,
			&i.LastUsedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeOrganizationAccessToken = `-- name: RevokeOrganizationAccessToken :exec
DELETE FROM organization_access_tokens WHERE id = $1 AND organization_id = $2
`

type RevokeOrganizationAccessTokenParams struct {
	ID             pgtype.UUID `json:"id"`
	OrganizationID pgtype.UUID `json:"organization_id"`
}

func (q *Queries) RevokeOrganizationAccessToken(ctx context.Context, arg RevokeOrganizationAccessTokenParams) error {
	_, err := q.db.Exec(ctx, revokeOrganizationAccessToken, arg.ID, arg.OrganizationID)
	return err
}

const updateOrgTokenLastUsed = `-- name: UpdateOrgTokenLastUsed :exec
UPDATE organization_access_tokens SET last_used_at = NOW(), updated_at = NOW() WHERE id = $1
`

func (q *Queries) UpdateOrgTokenLastUsed(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateOrgTokenLastUsed, id)
	return err
}
