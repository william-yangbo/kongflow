// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: personal_tokens.sql

package apiauth

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPersonalAccessToken = `-- name: CreatePersonalAccessToken :one
INSERT INTO personal_access_tokens (user_id, token, name, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, token, name, expires_at, last_used_at, created_at, updated_at
`

type CreatePersonalAccessTokenParams struct {
	UserID    pgtype.UUID        `json:"user_id"`
	Token     string             `json:"token"`
	Name      string             `json:"name"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreatePersonalAccessToken(ctx context.Context, arg CreatePersonalAccessTokenParams) (PersonalAccessTokens, error) {
	row := q.db.QueryRow(ctx, createPersonalAccessToken,
		arg.UserID,
		arg.Token,
		arg.Name,
		arg.ExpiresAt,
	)
	var i PersonalAccessTokens
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Name,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPersonalAccessToken = `-- name: FindPersonalAccessToken :one
SELECT id, user_id, token, name, expires_at, last_used_at, created_at, updated_at FROM personal_access_tokens WHERE token = $1 AND expires_at > NOW() LIMIT 1
`

// Personal Access Tokens queries - trigger.dev PAT alignment
func (q *Queries) FindPersonalAccessToken(ctx context.Context, token string) (PersonalAccessTokens, error) {
	row := q.db.QueryRow(ctx, findPersonalAccessToken, token)
	var i PersonalAccessTokens
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Name,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPersonalAccessTokenWithUser = `-- name: FindPersonalAccessTokenWithUser :one
SELECT 
    pat.id, pat.user_id, pat.token, pat.name, pat.expires_at, pat.last_used_at, pat.created_at, pat.updated_at,
    u.id as user_id, u.email as user_email, u.name as user_name, u.avatar_url as user_avatar_url
FROM personal_access_tokens pat
INNER JOIN users u ON pat.user_id = u.id
WHERE pat.token = $1 AND pat.expires_at > NOW() LIMIT 1
`

type FindPersonalAccessTokenWithUserRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	Token         string             `json:"token"`
	Name          string             `json:"name"`
	ExpiresAt     pgtype.Timestamptz `json:"expires_at"`
	LastUsedAt    pgtype.Timestamptz `json:"last_used_at"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	UserID_2      pgtype.UUID        `json:"user_id_2"`
	UserEmail     string             `json:"user_email"`
	UserName      pgtype.Text        `json:"user_name"`
	UserAvatarUrl pgtype.Text        `json:"user_avatar_url"`
}

func (q *Queries) FindPersonalAccessTokenWithUser(ctx context.Context, token string) (FindPersonalAccessTokenWithUserRow, error) {
	row := q.db.QueryRow(ctx, findPersonalAccessTokenWithUser, token)
	var i FindPersonalAccessTokenWithUserRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Name,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID_2,
		&i.UserEmail,
		&i.UserName,
		&i.UserAvatarUrl,
	)
	return i, err
}

const listPersonalAccessTokensByUser = `-- name: ListPersonalAccessTokensByUser :many
SELECT id, user_id, token, name, expires_at, last_used_at, created_at, updated_at FROM personal_access_tokens 
WHERE user_id = $1 AND expires_at > NOW()
ORDER BY created_at DESC
`

func (q *Queries) ListPersonalAccessTokensByUser(ctx context.Context, userID pgtype.UUID) ([]PersonalAccessTokens, error) {
	rows, err := q.db.Query(ctx, listPersonalAccessTokensByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PersonalAccessTokens
	for rows.Next() {
		var i PersonalAccessTokens
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.Name,
			&i.ExpiresAt,
			&i.LastUsedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokePersonalAccessToken = `-- name: RevokePersonalAccessToken :exec
DELETE FROM personal_access_tokens WHERE id = $1 AND user_id = $2
`

type RevokePersonalAccessTokenParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) RevokePersonalAccessToken(ctx context.Context, arg RevokePersonalAccessTokenParams) error {
	_, err := q.db.Exec(ctx, revokePersonalAccessToken, arg.ID, arg.UserID)
	return err
}

const updatePersonalTokenLastUsed = `-- name: UpdatePersonalTokenLastUsed :exec
UPDATE personal_access_tokens SET last_used_at = NOW(), updated_at = NOW() WHERE id = $1
`

func (q *Queries) UpdatePersonalTokenLastUsed(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updatePersonalTokenLastUsed, id)
	return err
}
