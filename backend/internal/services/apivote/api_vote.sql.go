// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: api_vote.sql

package apivote

import (
	"context"
)

const createApiVote = `-- name: CreateApiVote :one

INSERT INTO "ApiIntegrationVote" (
    "id",
    "apiIdentifier", 
    "userId",
    "createdAt",
    "updatedAt"
) VALUES (
    $1, $2, $3,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
) RETURNING id, "apiIdentifier", "userId", "createdAt", "updatedAt"
`

type CreateApiVoteParams struct {
	ID            string `json:"id"`
	ApiIdentifier string `json:"apiIdentifier"`
	UserId        string `json:"userId"`
}

// ApiVote Service SQL Queries
// 严格对齐 trigger.dev 的 ApiVoteService 功能
// 对齐 trigger.dev: apiIntegrationVote.create()
func (q *Queries) CreateApiVote(ctx context.Context, arg CreateApiVoteParams) (ApiIntegrationVote, error) {
	row := q.db.QueryRow(ctx, createApiVote, arg.ID, arg.ApiIdentifier, arg.UserId)
	var i ApiIntegrationVote
	err := row.Scan(
		&i.ID,
		&i.ApiIdentifier,
		&i.UserId,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteApiVoteByUserAndIdentifier = `-- name: DeleteApiVoteByUserAndIdentifier :exec
DELETE FROM "ApiIntegrationVote"
WHERE "apiIdentifier" = $1 AND "userId" = $2
`

type DeleteApiVoteByUserAndIdentifierParams struct {
	ApiIdentifier string `json:"apiIdentifier"`
	UserId        string `json:"userId"`
}

// 删除用户对特定API的投票（可选功能）
func (q *Queries) DeleteApiVoteByUserAndIdentifier(ctx context.Context, arg DeleteApiVoteByUserAndIdentifierParams) error {
	_, err := q.db.Exec(ctx, deleteApiVoteByUserAndIdentifier, arg.ApiIdentifier, arg.UserId)
	return err
}

const getApiVoteByUserAndIdentifier = `-- name: GetApiVoteByUserAndIdentifier :one
SELECT id, "apiIdentifier", "userId", "createdAt", "updatedAt" FROM "ApiIntegrationVote"
WHERE "apiIdentifier" = $1 AND "userId" = $2
`

type GetApiVoteByUserAndIdentifierParams struct {
	ApiIdentifier string `json:"apiIdentifier"`
	UserId        string `json:"userId"`
}

// 查询用户对特定API的投票记录，用于防重复投票逻辑
func (q *Queries) GetApiVoteByUserAndIdentifier(ctx context.Context, arg GetApiVoteByUserAndIdentifierParams) (ApiIntegrationVote, error) {
	row := q.db.QueryRow(ctx, getApiVoteByUserAndIdentifier, arg.ApiIdentifier, arg.UserId)
	var i ApiIntegrationVote
	err := row.Scan(
		&i.ID,
		&i.ApiIdentifier,
		&i.UserId,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
