// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: job_aliases.sql

package jobs

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJobAlias = `-- name: CreateJobAlias :one

INSERT INTO job_aliases (
    job_id, version_id, environment_id, name, value
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, job_id, version_id, environment_id, name, value, created_at, updated_at
`

type CreateJobAliasParams struct {
	JobID         pgtype.UUID `json:"job_id"`
	VersionID     pgtype.UUID `json:"version_id"`
	EnvironmentID pgtype.UUID `json:"environment_id"`
	Name          string      `json:"name"`
	Value         string      `json:"value"`
}

// job_aliases.sql
// JobAlias 作业别名相关查询
func (q *Queries) CreateJobAlias(ctx context.Context, arg CreateJobAliasParams) (JobAliases, error) {
	row := q.db.QueryRow(ctx, createJobAlias,
		arg.JobID,
		arg.VersionID,
		arg.EnvironmentID,
		arg.Name,
		arg.Value,
	)
	var i JobAliases
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.VersionID,
		&i.EnvironmentID,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteJobAlias = `-- name: DeleteJobAlias :exec
DELETE FROM job_aliases WHERE id = $1
`

func (q *Queries) DeleteJobAlias(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteJobAlias, id)
	return err
}

const deleteJobAliasesByJob = `-- name: DeleteJobAliasesByJob :exec
DELETE FROM job_aliases WHERE job_id = $1
`

func (q *Queries) DeleteJobAliasesByJob(ctx context.Context, jobID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteJobAliasesByJob, jobID)
	return err
}

const getJobAliasByID = `-- name: GetJobAliasByID :one
SELECT id, job_id, version_id, environment_id, name, value, created_at, updated_at
FROM job_aliases 
WHERE id = $1
`

func (q *Queries) GetJobAliasByID(ctx context.Context, id pgtype.UUID) (JobAliases, error) {
	row := q.db.QueryRow(ctx, getJobAliasByID, id)
	var i JobAliases
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.VersionID,
		&i.EnvironmentID,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getJobAliasByName = `-- name: GetJobAliasByName :one
SELECT id, job_id, version_id, environment_id, name, value, created_at, updated_at
FROM job_aliases 
WHERE job_id = $1 AND environment_id = $2 AND name = $3
`

type GetJobAliasByNameParams struct {
	JobID         pgtype.UUID `json:"job_id"`
	EnvironmentID pgtype.UUID `json:"environment_id"`
	Name          string      `json:"name"`
}

func (q *Queries) GetJobAliasByName(ctx context.Context, arg GetJobAliasByNameParams) (JobAliases, error) {
	row := q.db.QueryRow(ctx, getJobAliasByName, arg.JobID, arg.EnvironmentID, arg.Name)
	var i JobAliases
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.VersionID,
		&i.EnvironmentID,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listJobAliasesByJob = `-- name: ListJobAliasesByJob :many
SELECT id, job_id, version_id, environment_id, name, value, created_at, updated_at
FROM job_aliases 
WHERE job_id = $1 AND environment_id = $2
ORDER BY name
`

type ListJobAliasesByJobParams struct {
	JobID         pgtype.UUID `json:"job_id"`
	EnvironmentID pgtype.UUID `json:"environment_id"`
}

func (q *Queries) ListJobAliasesByJob(ctx context.Context, arg ListJobAliasesByJobParams) ([]JobAliases, error) {
	rows, err := q.db.Query(ctx, listJobAliasesByJob, arg.JobID, arg.EnvironmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobAliases
	for rows.Next() {
		var i JobAliases
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.VersionID,
			&i.EnvironmentID,
			&i.Name,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertJobAlias = `-- name: UpsertJobAlias :one
INSERT INTO job_aliases (
    job_id, version_id, environment_id, name, value
) VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (job_id, environment_id, name) 
DO UPDATE SET 
    version_id = EXCLUDED.version_id,
    value = EXCLUDED.value,
    updated_at = NOW()
RETURNING id, job_id, version_id, environment_id, name, value, created_at, updated_at
`

type UpsertJobAliasParams struct {
	JobID         pgtype.UUID `json:"job_id"`
	VersionID     pgtype.UUID `json:"version_id"`
	EnvironmentID pgtype.UUID `json:"environment_id"`
	Name          string      `json:"name"`
	Value         string      `json:"value"`
}

func (q *Queries) UpsertJobAlias(ctx context.Context, arg UpsertJobAliasParams) (JobAliases, error) {
	row := q.db.QueryRow(ctx, upsertJobAlias,
		arg.JobID,
		arg.VersionID,
		arg.EnvironmentID,
		arg.Name,
		arg.Value,
	)
	var i JobAliases
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.VersionID,
		&i.EnvironmentID,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
