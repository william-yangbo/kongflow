// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: jobs.sql

package jobs

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countJobsByProject = `-- name: CountJobsByProject :one
SELECT COUNT(*) FROM jobs WHERE project_id = $1
`

func (q *Queries) CountJobsByProject(ctx context.Context, projectID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countJobsByProject, projectID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createJob = `-- name: CreateJob :one

INSERT INTO jobs (
    slug, title, internal, organization_id, project_id
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, slug, title, internal, organization_id, project_id, created_at, updated_at
`

type CreateJobParams struct {
	Slug           string      `json:"slug"`
	Title          string      `json:"title"`
	Internal       bool        `json:"internal"`
	OrganizationID pgtype.UUID `json:"organization_id"`
	ProjectID      pgtype.UUID `json:"project_id"`
}

// jobs.sql
// Job 作业相关查询，对齐 trigger.dev 的 Job 操作
func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Jobs, error) {
	row := q.db.QueryRow(ctx, createJob,
		arg.Slug,
		arg.Title,
		arg.Internal,
		arg.OrganizationID,
		arg.ProjectID,
	)
	var i Jobs
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Internal,
		&i.OrganizationID,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs WHERE id = $1
`

func (q *Queries) DeleteJob(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteJob, id)
	return err
}

const getJobByID = `-- name: GetJobByID :one
SELECT id, slug, title, internal, organization_id, project_id, created_at, updated_at
FROM jobs 
WHERE id = $1
`

func (q *Queries) GetJobByID(ctx context.Context, id pgtype.UUID) (Jobs, error) {
	row := q.db.QueryRow(ctx, getJobByID, id)
	var i Jobs
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Internal,
		&i.OrganizationID,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getJobBySlug = `-- name: GetJobBySlug :one
SELECT id, slug, title, internal, organization_id, project_id, created_at, updated_at
FROM jobs 
WHERE project_id = $1 AND slug = $2
`

type GetJobBySlugParams struct {
	ProjectID pgtype.UUID `json:"project_id"`
	Slug      string      `json:"slug"`
}

func (q *Queries) GetJobBySlug(ctx context.Context, arg GetJobBySlugParams) (Jobs, error) {
	row := q.db.QueryRow(ctx, getJobBySlug, arg.ProjectID, arg.Slug)
	var i Jobs
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Internal,
		&i.OrganizationID,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listJobsByOrganization = `-- name: ListJobsByOrganization :many
SELECT id, slug, title, internal, organization_id, project_id, created_at, updated_at
FROM jobs 
WHERE organization_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListJobsByOrganizationParams struct {
	OrganizationID pgtype.UUID `json:"organization_id"`
	Limit          int32       `json:"limit"`
	Offset         int32       `json:"offset"`
}

func (q *Queries) ListJobsByOrganization(ctx context.Context, arg ListJobsByOrganizationParams) ([]Jobs, error) {
	rows, err := q.db.Query(ctx, listJobsByOrganization, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Jobs
	for rows.Next() {
		var i Jobs
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Internal,
			&i.OrganizationID,
			&i.ProjectID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobsByProject = `-- name: ListJobsByProject :many
SELECT id, slug, title, internal, organization_id, project_id, created_at, updated_at
FROM jobs 
WHERE project_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListJobsByProjectParams struct {
	ProjectID pgtype.UUID `json:"project_id"`
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
}

func (q *Queries) ListJobsByProject(ctx context.Context, arg ListJobsByProjectParams) ([]Jobs, error) {
	rows, err := q.db.Query(ctx, listJobsByProject, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Jobs
	for rows.Next() {
		var i Jobs
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Internal,
			&i.OrganizationID,
			&i.ProjectID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :one
UPDATE jobs 
SET title = $2, internal = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, slug, title, internal, organization_id, project_id, created_at, updated_at
`

type UpdateJobParams struct {
	ID       pgtype.UUID `json:"id"`
	Title    string      `json:"title"`
	Internal bool        `json:"internal"`
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) (Jobs, error) {
	row := q.db.QueryRow(ctx, updateJob, arg.ID, arg.Title, arg.Internal)
	var i Jobs
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Internal,
		&i.OrganizationID,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertJob = `-- name: UpsertJob :one
INSERT INTO jobs (
    slug, title, internal, organization_id, project_id
) VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (project_id, slug) 
DO UPDATE SET 
    title = EXCLUDED.title,
    internal = EXCLUDED.internal,
    updated_at = NOW()
RETURNING id, slug, title, internal, organization_id, project_id, created_at, updated_at
`

type UpsertJobParams struct {
	Slug           string      `json:"slug"`
	Title          string      `json:"title"`
	Internal       bool        `json:"internal"`
	OrganizationID pgtype.UUID `json:"organization_id"`
	ProjectID      pgtype.UUID `json:"project_id"`
}

func (q *Queries) UpsertJob(ctx context.Context, arg UpsertJobParams) (Jobs, error) {
	row := q.db.QueryRow(ctx, upsertJob,
		arg.Slug,
		arg.Title,
		arg.Internal,
		arg.OrganizationID,
		arg.ProjectID,
	)
	var i Jobs
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Internal,
		&i.OrganizationID,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
