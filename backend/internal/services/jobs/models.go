// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package jobs

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type JobStartPosition string

const (
	JobStartPositionINITIAL JobStartPosition = "INITIAL"
	JobStartPositionLATEST  JobStartPosition = "LATEST"
)

func (e *JobStartPosition) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JobStartPosition(s)
	case string:
		*e = JobStartPosition(s)
	default:
		return fmt.Errorf("unsupported scan type for JobStartPosition: %T", src)
	}
	return nil
}

type NullJobStartPosition struct {
	JobStartPosition JobStartPosition `json:"job_start_position"`
	Valid            bool             `json:"valid"` // Valid is true if JobStartPosition is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullJobStartPosition) Scan(value interface{}) error {
	if value == nil {
		ns.JobStartPosition, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.JobStartPosition.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullJobStartPosition) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.JobStartPosition), nil
}

// 事件示例表，存储作业的事件示例数据
type EventExamples struct {
	ID           pgtype.UUID        `json:"id"`
	JobVersionID pgtype.UUID        `json:"job_version_id"`
	Slug         string             `json:"slug"`
	Name         string             `json:"name"`
	Icon         pgtype.Text        `json:"icon"`
	Payload      []byte             `json:"payload"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

// 事件记录表，存储测试事件和实际事件记录
type EventRecords struct {
	ID pgtype.UUID `json:"id"`
	// 事件唯一标识符
	EventID string `json:"event_id"`
	// 事件名称
	Name string `json:"name"`
	// 事件源，如 trigger.dev
	Source string `json:"source"`
	// 事件负载数据 JSON
	Payload []byte `json:"payload"`
	// 事件上下文数据 JSON
	Context        []byte             `json:"context"`
	Timestamp      pgtype.Timestamptz `json:"timestamp"`
	EnvironmentID  pgtype.UUID        `json:"environment_id"`
	OrganizationID pgtype.UUID        `json:"organization_id"`
	ProjectID      pgtype.UUID        `json:"project_id"`
	// 是否为测试事件
	IsTest    bool               `json:"is_test"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Job 别名表，提供版本别名功能
type JobAliases struct {
	ID            pgtype.UUID        `json:"id"`
	JobID         pgtype.UUID        `json:"job_id"`
	VersionID     pgtype.UUID        `json:"version_id"`
	EnvironmentID pgtype.UUID        `json:"environment_id"`
	Name          string             `json:"name"`
	Value         string             `json:"value"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

// Job 队列表，管理作业执行队列
type JobQueues struct {
	ID            pgtype.UUID        `json:"id"`
	Name          string             `json:"name"`
	EnvironmentID pgtype.UUID        `json:"environment_id"`
	JobCount      int32              `json:"job_count"`
	MaxJobs       int32              `json:"max_jobs"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

// Job 版本表，管理作业的不同版本
type JobVersions struct {
	ID      pgtype.UUID `json:"id"`
	JobID   pgtype.UUID `json:"job_id"`
	Version string      `json:"version"`
	// 事件规范的 JSON 定义
	EventSpecification []byte `json:"event_specification"`
	// 作业属性的 JSON 定义
	Properties     []byte      `json:"properties"`
	EndpointID     pgtype.UUID `json:"endpoint_id"`
	EnvironmentID  pgtype.UUID `json:"environment_id"`
	OrganizationID pgtype.UUID `json:"organization_id"`
	ProjectID      pgtype.UUID `json:"project_id"`
	QueueID        pgtype.UUID `json:"queue_id"`
	// 作业开始位置：INITIAL 或 LATEST
	StartPosition JobStartPosition `json:"start_position"`
	// 是否需要预处理运行
	PreprocessRuns bool               `json:"preprocess_runs"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

// Job 作业主体表，对齐 trigger.dev 的 Job 模型
type Jobs struct {
	ID pgtype.UUID `json:"id"`
	// 作业唯一标识符，在项目内唯一
	Slug  string `json:"slug"`
	Title string `json:"title"`
	// 是否为内部作业
	Internal       bool               `json:"internal"`
	OrganizationID pgtype.UUID        `json:"organization_id"`
	ProjectID      pgtype.UUID        `json:"project_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}
