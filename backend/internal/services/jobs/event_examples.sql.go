// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: event_examples.sql

package jobs

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEventExample = `-- name: CreateEventExample :one

INSERT INTO event_examples (
    job_version_id, slug, name, icon, payload
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, job_version_id, slug, name, icon, payload, created_at, updated_at
`

type CreateEventExampleParams struct {
	JobVersionID pgtype.UUID `json:"job_version_id"`
	Slug         string      `json:"slug"`
	Name         string      `json:"name"`
	Icon         pgtype.Text `json:"icon"`
	Payload      []byte      `json:"payload"`
}

// event_examples.sql
// EventExample 事件示例相关查询
func (q *Queries) CreateEventExample(ctx context.Context, arg CreateEventExampleParams) (EventExamples, error) {
	row := q.db.QueryRow(ctx, createEventExample,
		arg.JobVersionID,
		arg.Slug,
		arg.Name,
		arg.Icon,
		arg.Payload,
	)
	var i EventExamples
	err := row.Scan(
		&i.ID,
		&i.JobVersionID,
		&i.Slug,
		&i.Name,
		&i.Icon,
		&i.Payload,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEventExample = `-- name: DeleteEventExample :exec
DELETE FROM event_examples WHERE id = $1
`

func (q *Queries) DeleteEventExample(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEventExample, id)
	return err
}

const deleteEventExamplesByJobVersion = `-- name: DeleteEventExamplesByJobVersion :exec
DELETE FROM event_examples WHERE job_version_id = $1
`

func (q *Queries) DeleteEventExamplesByJobVersion(ctx context.Context, jobVersionID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEventExamplesByJobVersion, jobVersionID)
	return err
}

const deleteEventExamplesNotInList = `-- name: DeleteEventExamplesNotInList :exec
DELETE FROM event_examples 
WHERE job_version_id = $1 AND id != ALL($2::uuid[])
`

type DeleteEventExamplesNotInListParams struct {
	JobVersionID pgtype.UUID   `json:"job_version_id"`
	Column2      []pgtype.UUID `json:"column_2"`
}

func (q *Queries) DeleteEventExamplesNotInList(ctx context.Context, arg DeleteEventExamplesNotInListParams) error {
	_, err := q.db.Exec(ctx, deleteEventExamplesNotInList, arg.JobVersionID, arg.Column2)
	return err
}

const getEventExampleByID = `-- name: GetEventExampleByID :one
SELECT id, job_version_id, slug, name, icon, payload, created_at, updated_at
FROM event_examples 
WHERE id = $1
`

func (q *Queries) GetEventExampleByID(ctx context.Context, id pgtype.UUID) (EventExamples, error) {
	row := q.db.QueryRow(ctx, getEventExampleByID, id)
	var i EventExamples
	err := row.Scan(
		&i.ID,
		&i.JobVersionID,
		&i.Slug,
		&i.Name,
		&i.Icon,
		&i.Payload,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventExampleBySlug = `-- name: GetEventExampleBySlug :one
SELECT id, job_version_id, slug, name, icon, payload, created_at, updated_at
FROM event_examples 
WHERE job_version_id = $1 AND slug = $2
`

type GetEventExampleBySlugParams struct {
	JobVersionID pgtype.UUID `json:"job_version_id"`
	Slug         string      `json:"slug"`
}

func (q *Queries) GetEventExampleBySlug(ctx context.Context, arg GetEventExampleBySlugParams) (EventExamples, error) {
	row := q.db.QueryRow(ctx, getEventExampleBySlug, arg.JobVersionID, arg.Slug)
	var i EventExamples
	err := row.Scan(
		&i.ID,
		&i.JobVersionID,
		&i.Slug,
		&i.Name,
		&i.Icon,
		&i.Payload,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEventExamplesByJobVersion = `-- name: ListEventExamplesByJobVersion :many
SELECT id, job_version_id, slug, name, icon, payload, created_at, updated_at
FROM event_examples 
WHERE job_version_id = $1
ORDER BY name
`

func (q *Queries) ListEventExamplesByJobVersion(ctx context.Context, jobVersionID pgtype.UUID) ([]EventExamples, error) {
	rows, err := q.db.Query(ctx, listEventExamplesByJobVersion, jobVersionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventExamples
	for rows.Next() {
		var i EventExamples
		if err := rows.Scan(
			&i.ID,
			&i.JobVersionID,
			&i.Slug,
			&i.Name,
			&i.Icon,
			&i.Payload,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertEventExample = `-- name: UpsertEventExample :one
INSERT INTO event_examples (
    job_version_id, slug, name, icon, payload
) VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (slug, job_version_id) 
DO UPDATE SET 
    name = EXCLUDED.name,
    icon = EXCLUDED.icon,
    payload = EXCLUDED.payload,
    updated_at = NOW()
RETURNING id, job_version_id, slug, name, icon, payload, created_at, updated_at
`

type UpsertEventExampleParams struct {
	JobVersionID pgtype.UUID `json:"job_version_id"`
	Slug         string      `json:"slug"`
	Name         string      `json:"name"`
	Icon         pgtype.Text `json:"icon"`
	Payload      []byte      `json:"payload"`
}

func (q *Queries) UpsertEventExample(ctx context.Context, arg UpsertEventExampleParams) (EventExamples, error) {
	row := q.db.QueryRow(ctx, upsertEventExample,
		arg.JobVersionID,
		arg.Slug,
		arg.Name,
		arg.Icon,
		arg.Payload,
	)
	var i EventExamples
	err := row.Scan(
		&i.ID,
		&i.JobVersionID,
		&i.Slug,
		&i.Name,
		&i.Icon,
		&i.Payload,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
