// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organizations.sql

package shared

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (title, slug)
VALUES ($1, $2)
RETURNING id, title, slug, created_at, updated_at
`

type CreateOrganizationParams struct {
	Title string `json:"title"`
	Slug  string `json:"slug"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organizations, error) {
	row := q.db.QueryRow(ctx, createOrganization, arg.Title, arg.Slug)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrganizationBySlug = `-- name: FindOrganizationBySlug :one
SELECT id, title, slug, created_at, updated_at FROM organizations WHERE slug = $1 LIMIT 1
`

func (q *Queries) FindOrganizationBySlug(ctx context.Context, slug string) (Organizations, error) {
	row := q.db.QueryRow(ctx, findOrganizationBySlug, slug)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, title, slug, created_at, updated_at FROM organizations WHERE id = $1 LIMIT 1
`

// Organizations queries - trigger.dev Organization entity alignment
func (q *Queries) GetOrganization(ctx context.Context, id pgtype.UUID) (Organizations, error) {
	row := q.db.QueryRow(ctx, getOrganization, id)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrganizations = `-- name: ListOrganizations :many
SELECT id, title, slug, created_at, updated_at FROM organizations
ORDER BY created_at DESC
`

func (q *Queries) ListOrganizations(ctx context.Context) ([]Organizations, error) {
	rows, err := q.db.Query(ctx, listOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organizations
	for rows.Next() {
		var i Organizations
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations 
SET title = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, title, slug, created_at, updated_at
`

type UpdateOrganizationParams struct {
	ID    pgtype.UUID `json:"id"`
	Title string      `json:"title"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organizations, error) {
	row := q.db.QueryRow(ctx, updateOrganization, arg.ID, arg.Title)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
