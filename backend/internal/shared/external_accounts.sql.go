// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: external_accounts.sql

package shared

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExternalAccount = `-- name: CreateExternalAccount :one
INSERT INTO external_accounts (identifier, metadata, organization_id, environment_id)
VALUES ($1, $2, $3, $4)
RETURNING id, identifier, metadata, organization_id, environment_id, created_at, updated_at
`

type CreateExternalAccountParams struct {
	Identifier     string      `json:"identifier"`
	Metadata       []byte      `json:"metadata"`
	OrganizationID pgtype.UUID `json:"organization_id"`
	EnvironmentID  pgtype.UUID `json:"environment_id"`
}

func (q *Queries) CreateExternalAccount(ctx context.Context, arg CreateExternalAccountParams) (ExternalAccounts, error) {
	row := q.db.QueryRow(ctx, createExternalAccount,
		arg.Identifier,
		arg.Metadata,
		arg.OrganizationID,
		arg.EnvironmentID,
	)
	var i ExternalAccounts
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.Metadata,
		&i.OrganizationID,
		&i.EnvironmentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findExternalAccountByEnvAndIdentifier = `-- name: FindExternalAccountByEnvAndIdentifier :one

SELECT id, identifier, metadata, organization_id, environment_id, created_at, updated_at FROM external_accounts 
WHERE environment_id = $1 AND identifier = $2 
LIMIT 1
`

type FindExternalAccountByEnvAndIdentifierParams struct {
	EnvironmentID pgtype.UUID `json:"environment_id"`
	Identifier    string      `json:"identifier"`
}

// external_accounts.sql
// External Accounts 共享查询，对齐 trigger.dev 访问模式
func (q *Queries) FindExternalAccountByEnvAndIdentifier(ctx context.Context, arg FindExternalAccountByEnvAndIdentifierParams) (ExternalAccounts, error) {
	row := q.db.QueryRow(ctx, findExternalAccountByEnvAndIdentifier, arg.EnvironmentID, arg.Identifier)
	var i ExternalAccounts
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.Metadata,
		&i.OrganizationID,
		&i.EnvironmentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExternalAccountByID = `-- name: GetExternalAccountByID :one
SELECT id, identifier, metadata, organization_id, environment_id, created_at, updated_at FROM external_accounts 
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetExternalAccountByID(ctx context.Context, id pgtype.UUID) (ExternalAccounts, error) {
	row := q.db.QueryRow(ctx, getExternalAccountByID, id)
	var i ExternalAccounts
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.Metadata,
		&i.OrganizationID,
		&i.EnvironmentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listExternalAccountsByEnvironment = `-- name: ListExternalAccountsByEnvironment :many
SELECT id, identifier, metadata, organization_id, environment_id, created_at, updated_at FROM external_accounts 
WHERE environment_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListExternalAccountsByEnvironmentParams struct {
	EnvironmentID pgtype.UUID `json:"environment_id"`
	Limit         int32       `json:"limit"`
	Offset        int32       `json:"offset"`
}

func (q *Queries) ListExternalAccountsByEnvironment(ctx context.Context, arg ListExternalAccountsByEnvironmentParams) ([]ExternalAccounts, error) {
	rows, err := q.db.Query(ctx, listExternalAccountsByEnvironment, arg.EnvironmentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExternalAccounts
	for rows.Next() {
		var i ExternalAccounts
		if err := rows.Scan(
			&i.ID,
			&i.Identifier,
			&i.Metadata,
			&i.OrganizationID,
			&i.EnvironmentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExternalAccountMetadata = `-- name: UpdateExternalAccountMetadata :exec
UPDATE external_accounts 
SET metadata = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateExternalAccountMetadataParams struct {
	ID       pgtype.UUID `json:"id"`
	Metadata []byte      `json:"metadata"`
}

func (q *Queries) UpdateExternalAccountMetadata(ctx context.Context, arg UpdateExternalAccountMetadataParams) error {
	_, err := q.db.Exec(ctx, updateExternalAccountMetadata, arg.ID, arg.Metadata)
	return err
}
