// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: runtime_environments.sql

package shared

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRuntimeEnvironment = `-- name: CreateRuntimeEnvironment :one
INSERT INTO runtime_environments (slug, api_key, type, organization_id, project_id, org_member_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, slug, api_key, type, organization_id, project_id, org_member_id, created_at, updated_at
`

type CreateRuntimeEnvironmentParams struct {
	Slug           string      `json:"slug"`
	ApiKey         string      `json:"api_key"`
	Type           string      `json:"type"`
	OrganizationID pgtype.UUID `json:"organization_id"`
	ProjectID      pgtype.UUID `json:"project_id"`
	OrgMemberID    pgtype.UUID `json:"org_member_id"`
}

func (q *Queries) CreateRuntimeEnvironment(ctx context.Context, arg CreateRuntimeEnvironmentParams) (RuntimeEnvironments, error) {
	row := q.db.QueryRow(ctx, createRuntimeEnvironment,
		arg.Slug,
		arg.ApiKey,
		arg.Type,
		arg.OrganizationID,
		arg.ProjectID,
		arg.OrgMemberID,
	)
	var i RuntimeEnvironments
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.ApiKey,
		&i.Type,
		&i.OrganizationID,
		&i.ProjectID,
		&i.OrgMemberID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findRuntimeEnvironmentByAPIKey = `-- name: FindRuntimeEnvironmentByAPIKey :one
SELECT id, slug, api_key, type, organization_id, project_id, org_member_id, created_at, updated_at FROM runtime_environments WHERE api_key = $1 LIMIT 1
`

func (q *Queries) FindRuntimeEnvironmentByAPIKey(ctx context.Context, apiKey string) (RuntimeEnvironments, error) {
	row := q.db.QueryRow(ctx, findRuntimeEnvironmentByAPIKey, apiKey)
	var i RuntimeEnvironments
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.ApiKey,
		&i.Type,
		&i.OrganizationID,
		&i.ProjectID,
		&i.OrgMemberID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findRuntimeEnvironmentByPublicAPIKey = `-- name: FindRuntimeEnvironmentByPublicAPIKey :one
SELECT id, slug, api_key, type, organization_id, project_id, org_member_id, created_at, updated_at FROM runtime_environments WHERE api_key = $1 AND type != 'PRODUCTION' LIMIT 1
`

func (q *Queries) FindRuntimeEnvironmentByPublicAPIKey(ctx context.Context, apiKey string) (RuntimeEnvironments, error) {
	row := q.db.QueryRow(ctx, findRuntimeEnvironmentByPublicAPIKey, apiKey)
	var i RuntimeEnvironments
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.ApiKey,
		&i.Type,
		&i.OrganizationID,
		&i.ProjectID,
		&i.OrgMemberID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEnvironmentWithProjectAndOrg = `-- name: GetEnvironmentWithProjectAndOrg :one
SELECT 
    re.id, re.slug, re.api_key, re.type, re.organization_id, re.project_id, 
    re.org_member_id, re.created_at, re.updated_at,
    p.id as project_id, p.slug as project_slug, p.name as project_name,
    o.id as org_id, o.slug as org_slug, o.title as org_title
FROM runtime_environments re
INNER JOIN projects p ON re.project_id = p.id
INNER JOIN organizations o ON re.organization_id = o.id
WHERE re.id = $1 LIMIT 1
`

type GetEnvironmentWithProjectAndOrgRow struct {
	ID             pgtype.UUID        `json:"id"`
	Slug           string             `json:"slug"`
	ApiKey         string             `json:"api_key"`
	Type           string             `json:"type"`
	OrganizationID pgtype.UUID        `json:"organization_id"`
	ProjectID      pgtype.UUID        `json:"project_id"`
	OrgMemberID    pgtype.UUID        `json:"org_member_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	ProjectID_2    pgtype.UUID        `json:"project_id_2"`
	ProjectSlug    string             `json:"project_slug"`
	ProjectName    string             `json:"project_name"`
	OrgID          pgtype.UUID        `json:"org_id"`
	OrgSlug        string             `json:"org_slug"`
	OrgTitle       string             `json:"org_title"`
}

func (q *Queries) GetEnvironmentWithProjectAndOrg(ctx context.Context, id pgtype.UUID) (GetEnvironmentWithProjectAndOrgRow, error) {
	row := q.db.QueryRow(ctx, getEnvironmentWithProjectAndOrg, id)
	var i GetEnvironmentWithProjectAndOrgRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.ApiKey,
		&i.Type,
		&i.OrganizationID,
		&i.ProjectID,
		&i.OrgMemberID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectID_2,
		&i.ProjectSlug,
		&i.ProjectName,
		&i.OrgID,
		&i.OrgSlug,
		&i.OrgTitle,
	)
	return i, err
}

const getRuntimeEnvironment = `-- name: GetRuntimeEnvironment :one
SELECT id, slug, api_key, type, organization_id, project_id, org_member_id, created_at, updated_at FROM runtime_environments WHERE id = $1 LIMIT 1
`

// Runtime Environments queries - trigger.dev RuntimeEnvironment alignment
func (q *Queries) GetRuntimeEnvironment(ctx context.Context, id pgtype.UUID) (RuntimeEnvironments, error) {
	row := q.db.QueryRow(ctx, getRuntimeEnvironment, id)
	var i RuntimeEnvironments
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.ApiKey,
		&i.Type,
		&i.OrganizationID,
		&i.ProjectID,
		&i.OrgMemberID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRuntimeEnvironmentsByProject = `-- name: ListRuntimeEnvironmentsByProject :many
SELECT id, slug, api_key, type, organization_id, project_id, org_member_id, created_at, updated_at FROM runtime_environments 
WHERE project_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListRuntimeEnvironmentsByProject(ctx context.Context, projectID pgtype.UUID) ([]RuntimeEnvironments, error) {
	rows, err := q.db.Query(ctx, listRuntimeEnvironmentsByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RuntimeEnvironments
	for rows.Next() {
		var i RuntimeEnvironments
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.ApiKey,
			&i.Type,
			&i.OrganizationID,
			&i.ProjectID,
			&i.OrgMemberID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRuntimeEnvironment = `-- name: UpdateRuntimeEnvironment :one
UPDATE runtime_environments 
SET slug = $2, type = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, slug, api_key, type, organization_id, project_id, org_member_id, created_at, updated_at
`

type UpdateRuntimeEnvironmentParams struct {
	ID   pgtype.UUID `json:"id"`
	Slug string      `json:"slug"`
	Type string      `json:"type"`
}

func (q *Queries) UpdateRuntimeEnvironment(ctx context.Context, arg UpdateRuntimeEnvironmentParams) (RuntimeEnvironments, error) {
	row := q.db.QueryRow(ctx, updateRuntimeEnvironment, arg.ID, arg.Slug, arg.Type)
	var i RuntimeEnvironments
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.ApiKey,
		&i.Type,
		&i.OrganizationID,
		&i.ProjectID,
		&i.OrgMemberID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
