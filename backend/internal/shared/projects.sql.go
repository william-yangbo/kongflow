// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package shared

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name, slug, organization_id)
VALUES ($1, $2, $3)
RETURNING id, name, slug, organization_id, created_at, updated_at
`

type CreateProjectParams struct {
	Name           string      `json:"name"`
	Slug           string      `json:"slug"`
	OrganizationID pgtype.UUID `json:"organization_id"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Projects, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Name, arg.Slug, arg.OrganizationID)
	var i Projects
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findProjectBySlug = `-- name: FindProjectBySlug :one
SELECT id, name, slug, organization_id, created_at, updated_at FROM projects WHERE organization_id = $1 AND slug = $2 LIMIT 1
`

type FindProjectBySlugParams struct {
	OrganizationID pgtype.UUID `json:"organization_id"`
	Slug           string      `json:"slug"`
}

func (q *Queries) FindProjectBySlug(ctx context.Context, arg FindProjectBySlugParams) (Projects, error) {
	row := q.db.QueryRow(ctx, findProjectBySlug, arg.OrganizationID, arg.Slug)
	var i Projects
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT id, name, slug, organization_id, created_at, updated_at FROM projects WHERE id = $1 LIMIT 1
`

// Projects queries - trigger.dev Project entity alignment
func (q *Queries) GetProject(ctx context.Context, id pgtype.UUID) (Projects, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Projects
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProjectsByOrganization = `-- name: ListProjectsByOrganization :many
SELECT id, name, slug, organization_id, created_at, updated_at FROM projects 
WHERE organization_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListProjectsByOrganization(ctx context.Context, organizationID pgtype.UUID) ([]Projects, error) {
	rows, err := q.db.Query(ctx, listProjectsByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Projects
	for rows.Next() {
		var i Projects
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.OrganizationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects 
SET name = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, name, slug, organization_id, created_at, updated_at
`

type UpdateProjectParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Projects, error) {
	row := q.db.QueryRow(ctx, updateProject, arg.ID, arg.Name)
	var i Projects
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
