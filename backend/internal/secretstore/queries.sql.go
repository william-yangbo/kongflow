// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package secretstore

import (
	"context"
	"time"
)

const deleteSecretStore = `-- name: DeleteSecretStore :exec
DELETE FROM secret_store WHERE key = $1
`

func (q *Queries) DeleteSecretStore(ctx context.Context, key string) error {
	_, err := q.db.Exec(ctx, deleteSecretStore, key)
	return err
}

const getSecretStore = `-- name: GetSecretStore :one
SELECT key, value, created_at, updated_at FROM secret_store WHERE key = $1
`

func (q *Queries) GetSecretStore(ctx context.Context, key string) (SecretStore, error) {
	row := q.db.QueryRow(ctx, getSecretStore, key)
	var i SecretStore
	err := row.Scan(&i.Key, &i.Value, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getSecretStoreCount = `-- name: GetSecretStoreCount :one
SELECT COUNT(*) FROM secret_store
`

func (q *Queries) GetSecretStoreCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getSecretStoreCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listSecretStoreKeys = `-- name: ListSecretStoreKeys :many
SELECT key, created_at, updated_at FROM secret_store
ORDER BY created_at DESC
`

type ListSecretStoreKeysRow struct {
	Key       string    `json:"key"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) ListSecretStoreKeys(ctx context.Context) ([]ListSecretStoreKeysRow, error) {
	rows, err := q.db.Query(ctx, listSecretStoreKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSecretStoreKeysRow
	for rows.Next() {
		var i ListSecretStoreKeysRow
		if err := rows.Scan(&i.Key, &i.CreatedAt, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertSecretStore = `-- name: UpsertSecretStore :exec
INSERT INTO secret_store (key, value) VALUES ($1, $2)
ON CONFLICT (key) DO UPDATE SET
    value = EXCLUDED.value,
    updated_at = NOW()
`

type UpsertSecretStoreParams struct {
	Key   string `json:"key"`
	Value []byte `json:"value"`
}

func (q *Queries) UpsertSecretStore(ctx context.Context, arg UpsertSecretStoreParams) error {
	_, err := q.db.Exec(ctx, upsertSecretStore, arg.Key, arg.Value)
	return err
}
