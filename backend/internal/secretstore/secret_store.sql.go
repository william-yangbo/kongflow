// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: secret_store.sql

package secretstore

import (
	"context"
)

const getSecretStore = `-- name: GetSecretStore :one
SELECT key, value, "createdAt", "updatedAt" FROM "SecretStore" WHERE "key" = $1
`

func (q *Queries) GetSecretStore(ctx context.Context, key string) (SecretStore, error) {
	row := q.db.QueryRow(ctx, getSecretStore, key)
	var i SecretStore
	err := row.Scan(
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertSecretStore = `-- name: UpsertSecretStore :exec
INSERT INTO "SecretStore" ("key", "value", "createdAt", "updatedAt") 
VALUES ($1, $2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
ON CONFLICT ("key") DO UPDATE SET
    "value" = EXCLUDED."value",
    "updatedAt" = CURRENT_TIMESTAMP
`

type UpsertSecretStoreParams struct {
	Key   string `json:"key"`
	Value []byte `json:"value"`
}

func (q *Queries) UpsertSecretStore(ctx context.Context, arg UpsertSecretStoreParams) error {
	_, err := q.db.Exec(ctx, upsertSecretStore, arg.Key, arg.Value)
	return err
}
